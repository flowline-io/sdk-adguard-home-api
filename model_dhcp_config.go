/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DhcpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpConfig{}

// DhcpConfig struct for DhcpConfig
type DhcpConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	InterfaceName *string `json:"interface_name,omitempty"`
	V4 *DhcpConfigV4 `json:"v4,omitempty"`
	V6 *DhcpConfigV6 `json:"v6,omitempty"`
}

// NewDhcpConfig instantiates a new DhcpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpConfig() *DhcpConfig {
	this := DhcpConfig{}
	return &this
}

// NewDhcpConfigWithDefaults instantiates a new DhcpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpConfigWithDefaults() *DhcpConfig {
	this := DhcpConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DhcpConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DhcpConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DhcpConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *DhcpConfig) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpConfig) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *DhcpConfig) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *DhcpConfig) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetV4 returns the V4 field value if set, zero value otherwise.
func (o *DhcpConfig) GetV4() DhcpConfigV4 {
	if o == nil || IsNil(o.V4) {
		var ret DhcpConfigV4
		return ret
	}
	return *o.V4
}

// GetV4Ok returns a tuple with the V4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpConfig) GetV4Ok() (*DhcpConfigV4, bool) {
	if o == nil || IsNil(o.V4) {
		return nil, false
	}
	return o.V4, true
}

// HasV4 returns a boolean if a field has been set.
func (o *DhcpConfig) HasV4() bool {
	if o != nil && !IsNil(o.V4) {
		return true
	}

	return false
}

// SetV4 gets a reference to the given DhcpConfigV4 and assigns it to the V4 field.
func (o *DhcpConfig) SetV4(v DhcpConfigV4) {
	o.V4 = &v
}

// GetV6 returns the V6 field value if set, zero value otherwise.
func (o *DhcpConfig) GetV6() DhcpConfigV6 {
	if o == nil || IsNil(o.V6) {
		var ret DhcpConfigV6
		return ret
	}
	return *o.V6
}

// GetV6Ok returns a tuple with the V6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpConfig) GetV6Ok() (*DhcpConfigV6, bool) {
	if o == nil || IsNil(o.V6) {
		return nil, false
	}
	return o.V6, true
}

// HasV6 returns a boolean if a field has been set.
func (o *DhcpConfig) HasV6() bool {
	if o != nil && !IsNil(o.V6) {
		return true
	}

	return false
}

// SetV6 gets a reference to the given DhcpConfigV6 and assigns it to the V6 field.
func (o *DhcpConfig) SetV6(v DhcpConfigV6) {
	o.V6 = &v
}

func (o DhcpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if !IsNil(o.V4) {
		toSerialize["v4"] = o.V4
	}
	if !IsNil(o.V6) {
		toSerialize["v6"] = o.V6
	}
	return toSerialize, nil
}

type NullableDhcpConfig struct {
	value *DhcpConfig
	isSet bool
}

func (v NullableDhcpConfig) Get() *DhcpConfig {
	return v.value
}

func (v *NullableDhcpConfig) Set(val *DhcpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpConfig(val *DhcpConfig) *NullableDhcpConfig {
	return &NullableDhcpConfig{value: val, isSet: true}
}

func (v NullableDhcpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


