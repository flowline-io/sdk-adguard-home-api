/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DhcpStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpStatus{}

// DhcpStatus Built-in DHCP server configuration and status
type DhcpStatus struct {
	Enabled *bool `json:"enabled,omitempty"`
	InterfaceName *string `json:"interface_name,omitempty"`
	V4 *DhcpConfigV4 `json:"v4,omitempty"`
	V6 *DhcpConfigV6 `json:"v6,omitempty"`
	Leases []DhcpLease `json:"leases"`
	StaticLeases []DhcpStaticLease `json:"static_leases,omitempty"`
}

type _DhcpStatus DhcpStatus

// NewDhcpStatus instantiates a new DhcpStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpStatus(leases []DhcpLease) *DhcpStatus {
	this := DhcpStatus{}
	this.Leases = leases
	return &this
}

// NewDhcpStatusWithDefaults instantiates a new DhcpStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpStatusWithDefaults() *DhcpStatus {
	this := DhcpStatus{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DhcpStatus) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DhcpStatus) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DhcpStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *DhcpStatus) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *DhcpStatus) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *DhcpStatus) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetV4 returns the V4 field value if set, zero value otherwise.
func (o *DhcpStatus) GetV4() DhcpConfigV4 {
	if o == nil || IsNil(o.V4) {
		var ret DhcpConfigV4
		return ret
	}
	return *o.V4
}

// GetV4Ok returns a tuple with the V4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetV4Ok() (*DhcpConfigV4, bool) {
	if o == nil || IsNil(o.V4) {
		return nil, false
	}
	return o.V4, true
}

// HasV4 returns a boolean if a field has been set.
func (o *DhcpStatus) HasV4() bool {
	if o != nil && !IsNil(o.V4) {
		return true
	}

	return false
}

// SetV4 gets a reference to the given DhcpConfigV4 and assigns it to the V4 field.
func (o *DhcpStatus) SetV4(v DhcpConfigV4) {
	o.V4 = &v
}

// GetV6 returns the V6 field value if set, zero value otherwise.
func (o *DhcpStatus) GetV6() DhcpConfigV6 {
	if o == nil || IsNil(o.V6) {
		var ret DhcpConfigV6
		return ret
	}
	return *o.V6
}

// GetV6Ok returns a tuple with the V6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetV6Ok() (*DhcpConfigV6, bool) {
	if o == nil || IsNil(o.V6) {
		return nil, false
	}
	return o.V6, true
}

// HasV6 returns a boolean if a field has been set.
func (o *DhcpStatus) HasV6() bool {
	if o != nil && !IsNil(o.V6) {
		return true
	}

	return false
}

// SetV6 gets a reference to the given DhcpConfigV6 and assigns it to the V6 field.
func (o *DhcpStatus) SetV6(v DhcpConfigV6) {
	o.V6 = &v
}

// GetLeases returns the Leases field value
func (o *DhcpStatus) GetLeases() []DhcpLease {
	if o == nil {
		var ret []DhcpLease
		return ret
	}

	return o.Leases
}

// GetLeasesOk returns a tuple with the Leases field value
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetLeasesOk() ([]DhcpLease, bool) {
	if o == nil {
		return nil, false
	}
	return o.Leases, true
}

// SetLeases sets field value
func (o *DhcpStatus) SetLeases(v []DhcpLease) {
	o.Leases = v
}

// GetStaticLeases returns the StaticLeases field value if set, zero value otherwise.
func (o *DhcpStatus) GetStaticLeases() []DhcpStaticLease {
	if o == nil || IsNil(o.StaticLeases) {
		var ret []DhcpStaticLease
		return ret
	}
	return o.StaticLeases
}

// GetStaticLeasesOk returns a tuple with the StaticLeases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStatus) GetStaticLeasesOk() ([]DhcpStaticLease, bool) {
	if o == nil || IsNil(o.StaticLeases) {
		return nil, false
	}
	return o.StaticLeases, true
}

// HasStaticLeases returns a boolean if a field has been set.
func (o *DhcpStatus) HasStaticLeases() bool {
	if o != nil && !IsNil(o.StaticLeases) {
		return true
	}

	return false
}

// SetStaticLeases gets a reference to the given []DhcpStaticLease and assigns it to the StaticLeases field.
func (o *DhcpStatus) SetStaticLeases(v []DhcpStaticLease) {
	o.StaticLeases = v
}

func (o DhcpStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if !IsNil(o.V4) {
		toSerialize["v4"] = o.V4
	}
	if !IsNil(o.V6) {
		toSerialize["v6"] = o.V6
	}
	toSerialize["leases"] = o.Leases
	if !IsNil(o.StaticLeases) {
		toSerialize["static_leases"] = o.StaticLeases
	}
	return toSerialize, nil
}

func (o *DhcpStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"leases",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDhcpStatus := _DhcpStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDhcpStatus)

	if err != nil {
		return err
	}

	*o = DhcpStatus(varDhcpStatus)

	return err
}

type NullableDhcpStatus struct {
	value *DhcpStatus
	isSet bool
}

func (v NullableDhcpStatus) Get() *DhcpStatus {
	return v.value
}

func (v *NullableDhcpStatus) Set(val *DhcpStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpStatus(val *DhcpStatus) *NullableDhcpStatus {
	return &NullableDhcpStatus{value: val, isSet: true}
}

func (v NullableDhcpStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


