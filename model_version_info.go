/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionInfo{}

// VersionInfo Information about the latest available version of AdGuard Home. 
type VersionInfo struct {
	// If true then other fields doesn't appear. 
	Disabled bool `json:"disabled"`
	NewVersion *string `json:"new_version,omitempty"`
	Announcement *string `json:"announcement,omitempty"`
	AnnouncementUrl *string `json:"announcement_url,omitempty"`
	CanAutoupdate *bool `json:"can_autoupdate,omitempty"`
}

type _VersionInfo VersionInfo

// NewVersionInfo instantiates a new VersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionInfo(disabled bool) *VersionInfo {
	this := VersionInfo{}
	this.Disabled = disabled
	return &this
}

// NewVersionInfoWithDefaults instantiates a new VersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionInfoWithDefaults() *VersionInfo {
	this := VersionInfo{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *VersionInfo) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *VersionInfo) SetDisabled(v bool) {
	o.Disabled = v
}

// GetNewVersion returns the NewVersion field value if set, zero value otherwise.
func (o *VersionInfo) GetNewVersion() string {
	if o == nil || IsNil(o.NewVersion) {
		var ret string
		return ret
	}
	return *o.NewVersion
}

// GetNewVersionOk returns a tuple with the NewVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetNewVersionOk() (*string, bool) {
	if o == nil || IsNil(o.NewVersion) {
		return nil, false
	}
	return o.NewVersion, true
}

// HasNewVersion returns a boolean if a field has been set.
func (o *VersionInfo) HasNewVersion() bool {
	if o != nil && !IsNil(o.NewVersion) {
		return true
	}

	return false
}

// SetNewVersion gets a reference to the given string and assigns it to the NewVersion field.
func (o *VersionInfo) SetNewVersion(v string) {
	o.NewVersion = &v
}

// GetAnnouncement returns the Announcement field value if set, zero value otherwise.
func (o *VersionInfo) GetAnnouncement() string {
	if o == nil || IsNil(o.Announcement) {
		var ret string
		return ret
	}
	return *o.Announcement
}

// GetAnnouncementOk returns a tuple with the Announcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetAnnouncementOk() (*string, bool) {
	if o == nil || IsNil(o.Announcement) {
		return nil, false
	}
	return o.Announcement, true
}

// HasAnnouncement returns a boolean if a field has been set.
func (o *VersionInfo) HasAnnouncement() bool {
	if o != nil && !IsNil(o.Announcement) {
		return true
	}

	return false
}

// SetAnnouncement gets a reference to the given string and assigns it to the Announcement field.
func (o *VersionInfo) SetAnnouncement(v string) {
	o.Announcement = &v
}

// GetAnnouncementUrl returns the AnnouncementUrl field value if set, zero value otherwise.
func (o *VersionInfo) GetAnnouncementUrl() string {
	if o == nil || IsNil(o.AnnouncementUrl) {
		var ret string
		return ret
	}
	return *o.AnnouncementUrl
}

// GetAnnouncementUrlOk returns a tuple with the AnnouncementUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetAnnouncementUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AnnouncementUrl) {
		return nil, false
	}
	return o.AnnouncementUrl, true
}

// HasAnnouncementUrl returns a boolean if a field has been set.
func (o *VersionInfo) HasAnnouncementUrl() bool {
	if o != nil && !IsNil(o.AnnouncementUrl) {
		return true
	}

	return false
}

// SetAnnouncementUrl gets a reference to the given string and assigns it to the AnnouncementUrl field.
func (o *VersionInfo) SetAnnouncementUrl(v string) {
	o.AnnouncementUrl = &v
}

// GetCanAutoupdate returns the CanAutoupdate field value if set, zero value otherwise.
func (o *VersionInfo) GetCanAutoupdate() bool {
	if o == nil || IsNil(o.CanAutoupdate) {
		var ret bool
		return ret
	}
	return *o.CanAutoupdate
}

// GetCanAutoupdateOk returns a tuple with the CanAutoupdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetCanAutoupdateOk() (*bool, bool) {
	if o == nil || IsNil(o.CanAutoupdate) {
		return nil, false
	}
	return o.CanAutoupdate, true
}

// HasCanAutoupdate returns a boolean if a field has been set.
func (o *VersionInfo) HasCanAutoupdate() bool {
	if o != nil && !IsNil(o.CanAutoupdate) {
		return true
	}

	return false
}

// SetCanAutoupdate gets a reference to the given bool and assigns it to the CanAutoupdate field.
func (o *VersionInfo) SetCanAutoupdate(v bool) {
	o.CanAutoupdate = &v
}

func (o VersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.NewVersion) {
		toSerialize["new_version"] = o.NewVersion
	}
	if !IsNil(o.Announcement) {
		toSerialize["announcement"] = o.Announcement
	}
	if !IsNil(o.AnnouncementUrl) {
		toSerialize["announcement_url"] = o.AnnouncementUrl
	}
	if !IsNil(o.CanAutoupdate) {
		toSerialize["can_autoupdate"] = o.CanAutoupdate
	}
	return toSerialize, nil
}

func (o *VersionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionInfo := _VersionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionInfo)

	if err != nil {
		return err
	}

	*o = VersionInfo(varVersionInfo)

	return err
}

type NullableVersionInfo struct {
	value *VersionInfo
	isSet bool
}

func (v NullableVersionInfo) Get() *VersionInfo {
	return v.value
}

func (v *NullableVersionInfo) Set(val *VersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionInfo(val *VersionInfo) *NullableVersionInfo {
	return &NullableVersionInfo{value: val, isSet: true}
}

func (v NullableVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


