/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TlsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TlsConfig{}

// TlsConfig TLS configuration settings and status
type TlsConfig struct {
	// enabled is the encryption (DoT/DoH/HTTPS) status
	Enabled *bool `json:"enabled,omitempty"`
	// server_name is the hostname of your HTTPS/TLS server
	ServerName *string `json:"server_name,omitempty"`
	// if true, forces HTTP->HTTPS redirect
	ForceHttps *bool `json:"force_https,omitempty"`
	// HTTPS port. If 0, HTTPS will be disabled.
	PortHttps *int32 `json:"port_https,omitempty"`
	// DNS-over-TLS port. If 0, DoT will be disabled.
	PortDnsOverTls *int32 `json:"port_dns_over_tls,omitempty"`
	// DNS-over-QUIC port. If 0, DoQ will be disabled.
	PortDnsOverQuic *int32 `json:"port_dns_over_quic,omitempty"`
	// Base64 string with PEM-encoded certificates chain
	CertificateChain *string `json:"certificate_chain,omitempty"`
	// Base64 string with PEM-encoded private key
	PrivateKey *string `json:"private_key,omitempty"`
	// Set to true if the user has previously saved a private key as a string.  This is used so that the server and the client don't have to send the private key between each other every time, which might lead to security issues. 
	PrivateKeySaved *bool `json:"private_key_saved,omitempty"`
	// Path to certificate file
	CertificatePath *string `json:"certificate_path,omitempty"`
	// Path to private key file
	PrivateKeyPath *string `json:"private_key_path,omitempty"`
	// Set to true if the specified certificates chain is a valid chain of X509 certificates. 
	ValidCert *bool `json:"valid_cert,omitempty"`
	// Set to true if the specified certificates chain is verified and issued by a known CA. 
	ValidChain *bool `json:"valid_chain,omitempty"`
	// The subject of the first certificate in the chain.
	Subject *string `json:"subject,omitempty"`
	// The issuer of the first certificate in the chain.
	Issuer *string `json:"issuer,omitempty"`
	// The NotBefore field of the first certificate in the chain. 
	NotBefore *string `json:"not_before,omitempty"`
	// The NotAfter field of the first certificate in the chain. 
	NotAfter *string `json:"not_after,omitempty"`
	// The value of SubjectAltNames field of the first certificate in the chain. 
	DnsNames []string `json:"dns_names,omitempty"`
	// Set to true if the key is a valid private key.
	ValidKey *bool `json:"valid_key,omitempty"`
	// Key type.
	KeyType *string `json:"key_type,omitempty"`
	// A validation warning message with the issue description. 
	WarningValidation *string `json:"warning_validation,omitempty"`
	// Set to true if both certificate and private key are correct. 
	ValidPair *bool `json:"valid_pair,omitempty"`
	// Set to true if plain DNS is allowed for incoming requests. 
	ServePlainDns *bool `json:"serve_plain_dns,omitempty"`
}

// NewTlsConfig instantiates a new TlsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTlsConfig() *TlsConfig {
	this := TlsConfig{}
	return &this
}

// NewTlsConfigWithDefaults instantiates a new TlsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTlsConfigWithDefaults() *TlsConfig {
	this := TlsConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TlsConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TlsConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TlsConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *TlsConfig) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *TlsConfig) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *TlsConfig) SetServerName(v string) {
	o.ServerName = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *TlsConfig) GetForceHttps() bool {
	if o == nil || IsNil(o.ForceHttps) {
		var ret bool
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetForceHttpsOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceHttps) {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *TlsConfig) HasForceHttps() bool {
	if o != nil && !IsNil(o.ForceHttps) {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given bool and assigns it to the ForceHttps field.
func (o *TlsConfig) SetForceHttps(v bool) {
	o.ForceHttps = &v
}

// GetPortHttps returns the PortHttps field value if set, zero value otherwise.
func (o *TlsConfig) GetPortHttps() int32 {
	if o == nil || IsNil(o.PortHttps) {
		var ret int32
		return ret
	}
	return *o.PortHttps
}

// GetPortHttpsOk returns a tuple with the PortHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPortHttpsOk() (*int32, bool) {
	if o == nil || IsNil(o.PortHttps) {
		return nil, false
	}
	return o.PortHttps, true
}

// HasPortHttps returns a boolean if a field has been set.
func (o *TlsConfig) HasPortHttps() bool {
	if o != nil && !IsNil(o.PortHttps) {
		return true
	}

	return false
}

// SetPortHttps gets a reference to the given int32 and assigns it to the PortHttps field.
func (o *TlsConfig) SetPortHttps(v int32) {
	o.PortHttps = &v
}

// GetPortDnsOverTls returns the PortDnsOverTls field value if set, zero value otherwise.
func (o *TlsConfig) GetPortDnsOverTls() int32 {
	if o == nil || IsNil(o.PortDnsOverTls) {
		var ret int32
		return ret
	}
	return *o.PortDnsOverTls
}

// GetPortDnsOverTlsOk returns a tuple with the PortDnsOverTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPortDnsOverTlsOk() (*int32, bool) {
	if o == nil || IsNil(o.PortDnsOverTls) {
		return nil, false
	}
	return o.PortDnsOverTls, true
}

// HasPortDnsOverTls returns a boolean if a field has been set.
func (o *TlsConfig) HasPortDnsOverTls() bool {
	if o != nil && !IsNil(o.PortDnsOverTls) {
		return true
	}

	return false
}

// SetPortDnsOverTls gets a reference to the given int32 and assigns it to the PortDnsOverTls field.
func (o *TlsConfig) SetPortDnsOverTls(v int32) {
	o.PortDnsOverTls = &v
}

// GetPortDnsOverQuic returns the PortDnsOverQuic field value if set, zero value otherwise.
func (o *TlsConfig) GetPortDnsOverQuic() int32 {
	if o == nil || IsNil(o.PortDnsOverQuic) {
		var ret int32
		return ret
	}
	return *o.PortDnsOverQuic
}

// GetPortDnsOverQuicOk returns a tuple with the PortDnsOverQuic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPortDnsOverQuicOk() (*int32, bool) {
	if o == nil || IsNil(o.PortDnsOverQuic) {
		return nil, false
	}
	return o.PortDnsOverQuic, true
}

// HasPortDnsOverQuic returns a boolean if a field has been set.
func (o *TlsConfig) HasPortDnsOverQuic() bool {
	if o != nil && !IsNil(o.PortDnsOverQuic) {
		return true
	}

	return false
}

// SetPortDnsOverQuic gets a reference to the given int32 and assigns it to the PortDnsOverQuic field.
func (o *TlsConfig) SetPortDnsOverQuic(v int32) {
	o.PortDnsOverQuic = &v
}

// GetCertificateChain returns the CertificateChain field value if set, zero value otherwise.
func (o *TlsConfig) GetCertificateChain() string {
	if o == nil || IsNil(o.CertificateChain) {
		var ret string
		return ret
	}
	return *o.CertificateChain
}

// GetCertificateChainOk returns a tuple with the CertificateChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetCertificateChainOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateChain) {
		return nil, false
	}
	return o.CertificateChain, true
}

// HasCertificateChain returns a boolean if a field has been set.
func (o *TlsConfig) HasCertificateChain() bool {
	if o != nil && !IsNil(o.CertificateChain) {
		return true
	}

	return false
}

// SetCertificateChain gets a reference to the given string and assigns it to the CertificateChain field.
func (o *TlsConfig) SetCertificateChain(v string) {
	o.CertificateChain = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *TlsConfig) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *TlsConfig) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *TlsConfig) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetPrivateKeySaved returns the PrivateKeySaved field value if set, zero value otherwise.
func (o *TlsConfig) GetPrivateKeySaved() bool {
	if o == nil || IsNil(o.PrivateKeySaved) {
		var ret bool
		return ret
	}
	return *o.PrivateKeySaved
}

// GetPrivateKeySavedOk returns a tuple with the PrivateKeySaved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPrivateKeySavedOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivateKeySaved) {
		return nil, false
	}
	return o.PrivateKeySaved, true
}

// HasPrivateKeySaved returns a boolean if a field has been set.
func (o *TlsConfig) HasPrivateKeySaved() bool {
	if o != nil && !IsNil(o.PrivateKeySaved) {
		return true
	}

	return false
}

// SetPrivateKeySaved gets a reference to the given bool and assigns it to the PrivateKeySaved field.
func (o *TlsConfig) SetPrivateKeySaved(v bool) {
	o.PrivateKeySaved = &v
}

// GetCertificatePath returns the CertificatePath field value if set, zero value otherwise.
func (o *TlsConfig) GetCertificatePath() string {
	if o == nil || IsNil(o.CertificatePath) {
		var ret string
		return ret
	}
	return *o.CertificatePath
}

// GetCertificatePathOk returns a tuple with the CertificatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetCertificatePathOk() (*string, bool) {
	if o == nil || IsNil(o.CertificatePath) {
		return nil, false
	}
	return o.CertificatePath, true
}

// HasCertificatePath returns a boolean if a field has been set.
func (o *TlsConfig) HasCertificatePath() bool {
	if o != nil && !IsNil(o.CertificatePath) {
		return true
	}

	return false
}

// SetCertificatePath gets a reference to the given string and assigns it to the CertificatePath field.
func (o *TlsConfig) SetCertificatePath(v string) {
	o.CertificatePath = &v
}

// GetPrivateKeyPath returns the PrivateKeyPath field value if set, zero value otherwise.
func (o *TlsConfig) GetPrivateKeyPath() string {
	if o == nil || IsNil(o.PrivateKeyPath) {
		var ret string
		return ret
	}
	return *o.PrivateKeyPath
}

// GetPrivateKeyPathOk returns a tuple with the PrivateKeyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetPrivateKeyPathOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKeyPath) {
		return nil, false
	}
	return o.PrivateKeyPath, true
}

// HasPrivateKeyPath returns a boolean if a field has been set.
func (o *TlsConfig) HasPrivateKeyPath() bool {
	if o != nil && !IsNil(o.PrivateKeyPath) {
		return true
	}

	return false
}

// SetPrivateKeyPath gets a reference to the given string and assigns it to the PrivateKeyPath field.
func (o *TlsConfig) SetPrivateKeyPath(v string) {
	o.PrivateKeyPath = &v
}

// GetValidCert returns the ValidCert field value if set, zero value otherwise.
func (o *TlsConfig) GetValidCert() bool {
	if o == nil || IsNil(o.ValidCert) {
		var ret bool
		return ret
	}
	return *o.ValidCert
}

// GetValidCertOk returns a tuple with the ValidCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetValidCertOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidCert) {
		return nil, false
	}
	return o.ValidCert, true
}

// HasValidCert returns a boolean if a field has been set.
func (o *TlsConfig) HasValidCert() bool {
	if o != nil && !IsNil(o.ValidCert) {
		return true
	}

	return false
}

// SetValidCert gets a reference to the given bool and assigns it to the ValidCert field.
func (o *TlsConfig) SetValidCert(v bool) {
	o.ValidCert = &v
}

// GetValidChain returns the ValidChain field value if set, zero value otherwise.
func (o *TlsConfig) GetValidChain() bool {
	if o == nil || IsNil(o.ValidChain) {
		var ret bool
		return ret
	}
	return *o.ValidChain
}

// GetValidChainOk returns a tuple with the ValidChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetValidChainOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidChain) {
		return nil, false
	}
	return o.ValidChain, true
}

// HasValidChain returns a boolean if a field has been set.
func (o *TlsConfig) HasValidChain() bool {
	if o != nil && !IsNil(o.ValidChain) {
		return true
	}

	return false
}

// SetValidChain gets a reference to the given bool and assigns it to the ValidChain field.
func (o *TlsConfig) SetValidChain(v bool) {
	o.ValidChain = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TlsConfig) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TlsConfig) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TlsConfig) SetSubject(v string) {
	o.Subject = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *TlsConfig) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *TlsConfig) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *TlsConfig) SetIssuer(v string) {
	o.Issuer = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *TlsConfig) GetNotBefore() string {
	if o == nil || IsNil(o.NotBefore) {
		var ret string
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetNotBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *TlsConfig) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given string and assigns it to the NotBefore field.
func (o *TlsConfig) SetNotBefore(v string) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *TlsConfig) GetNotAfter() string {
	if o == nil || IsNil(o.NotAfter) {
		var ret string
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetNotAfterOk() (*string, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *TlsConfig) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given string and assigns it to the NotAfter field.
func (o *TlsConfig) SetNotAfter(v string) {
	o.NotAfter = &v
}

// GetDnsNames returns the DnsNames field value if set, zero value otherwise.
func (o *TlsConfig) GetDnsNames() []string {
	if o == nil || IsNil(o.DnsNames) {
		var ret []string
		return ret
	}
	return o.DnsNames
}

// GetDnsNamesOk returns a tuple with the DnsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetDnsNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsNames) {
		return nil, false
	}
	return o.DnsNames, true
}

// HasDnsNames returns a boolean if a field has been set.
func (o *TlsConfig) HasDnsNames() bool {
	if o != nil && !IsNil(o.DnsNames) {
		return true
	}

	return false
}

// SetDnsNames gets a reference to the given []string and assigns it to the DnsNames field.
func (o *TlsConfig) SetDnsNames(v []string) {
	o.DnsNames = v
}

// GetValidKey returns the ValidKey field value if set, zero value otherwise.
func (o *TlsConfig) GetValidKey() bool {
	if o == nil || IsNil(o.ValidKey) {
		var ret bool
		return ret
	}
	return *o.ValidKey
}

// GetValidKeyOk returns a tuple with the ValidKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetValidKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidKey) {
		return nil, false
	}
	return o.ValidKey, true
}

// HasValidKey returns a boolean if a field has been set.
func (o *TlsConfig) HasValidKey() bool {
	if o != nil && !IsNil(o.ValidKey) {
		return true
	}

	return false
}

// SetValidKey gets a reference to the given bool and assigns it to the ValidKey field.
func (o *TlsConfig) SetValidKey(v bool) {
	o.ValidKey = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *TlsConfig) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *TlsConfig) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *TlsConfig) SetKeyType(v string) {
	o.KeyType = &v
}

// GetWarningValidation returns the WarningValidation field value if set, zero value otherwise.
func (o *TlsConfig) GetWarningValidation() string {
	if o == nil || IsNil(o.WarningValidation) {
		var ret string
		return ret
	}
	return *o.WarningValidation
}

// GetWarningValidationOk returns a tuple with the WarningValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetWarningValidationOk() (*string, bool) {
	if o == nil || IsNil(o.WarningValidation) {
		return nil, false
	}
	return o.WarningValidation, true
}

// HasWarningValidation returns a boolean if a field has been set.
func (o *TlsConfig) HasWarningValidation() bool {
	if o != nil && !IsNil(o.WarningValidation) {
		return true
	}

	return false
}

// SetWarningValidation gets a reference to the given string and assigns it to the WarningValidation field.
func (o *TlsConfig) SetWarningValidation(v string) {
	o.WarningValidation = &v
}

// GetValidPair returns the ValidPair field value if set, zero value otherwise.
func (o *TlsConfig) GetValidPair() bool {
	if o == nil || IsNil(o.ValidPair) {
		var ret bool
		return ret
	}
	return *o.ValidPair
}

// GetValidPairOk returns a tuple with the ValidPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetValidPairOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidPair) {
		return nil, false
	}
	return o.ValidPair, true
}

// HasValidPair returns a boolean if a field has been set.
func (o *TlsConfig) HasValidPair() bool {
	if o != nil && !IsNil(o.ValidPair) {
		return true
	}

	return false
}

// SetValidPair gets a reference to the given bool and assigns it to the ValidPair field.
func (o *TlsConfig) SetValidPair(v bool) {
	o.ValidPair = &v
}

// GetServePlainDns returns the ServePlainDns field value if set, zero value otherwise.
func (o *TlsConfig) GetServePlainDns() bool {
	if o == nil || IsNil(o.ServePlainDns) {
		var ret bool
		return ret
	}
	return *o.ServePlainDns
}

// GetServePlainDnsOk returns a tuple with the ServePlainDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsConfig) GetServePlainDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.ServePlainDns) {
		return nil, false
	}
	return o.ServePlainDns, true
}

// HasServePlainDns returns a boolean if a field has been set.
func (o *TlsConfig) HasServePlainDns() bool {
	if o != nil && !IsNil(o.ServePlainDns) {
		return true
	}

	return false
}

// SetServePlainDns gets a reference to the given bool and assigns it to the ServePlainDns field.
func (o *TlsConfig) SetServePlainDns(v bool) {
	o.ServePlainDns = &v
}

func (o TlsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TlsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ForceHttps) {
		toSerialize["force_https"] = o.ForceHttps
	}
	if !IsNil(o.PortHttps) {
		toSerialize["port_https"] = o.PortHttps
	}
	if !IsNil(o.PortDnsOverTls) {
		toSerialize["port_dns_over_tls"] = o.PortDnsOverTls
	}
	if !IsNil(o.PortDnsOverQuic) {
		toSerialize["port_dns_over_quic"] = o.PortDnsOverQuic
	}
	if !IsNil(o.CertificateChain) {
		toSerialize["certificate_chain"] = o.CertificateChain
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	if !IsNil(o.PrivateKeySaved) {
		toSerialize["private_key_saved"] = o.PrivateKeySaved
	}
	if !IsNil(o.CertificatePath) {
		toSerialize["certificate_path"] = o.CertificatePath
	}
	if !IsNil(o.PrivateKeyPath) {
		toSerialize["private_key_path"] = o.PrivateKeyPath
	}
	if !IsNil(o.ValidCert) {
		toSerialize["valid_cert"] = o.ValidCert
	}
	if !IsNil(o.ValidChain) {
		toSerialize["valid_chain"] = o.ValidChain
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.NotBefore) {
		toSerialize["not_before"] = o.NotBefore
	}
	if !IsNil(o.NotAfter) {
		toSerialize["not_after"] = o.NotAfter
	}
	if !IsNil(o.DnsNames) {
		toSerialize["dns_names"] = o.DnsNames
	}
	if !IsNil(o.ValidKey) {
		toSerialize["valid_key"] = o.ValidKey
	}
	if !IsNil(o.KeyType) {
		toSerialize["key_type"] = o.KeyType
	}
	if !IsNil(o.WarningValidation) {
		toSerialize["warning_validation"] = o.WarningValidation
	}
	if !IsNil(o.ValidPair) {
		toSerialize["valid_pair"] = o.ValidPair
	}
	if !IsNil(o.ServePlainDns) {
		toSerialize["serve_plain_dns"] = o.ServePlainDns
	}
	return toSerialize, nil
}

type NullableTlsConfig struct {
	value *TlsConfig
	isSet bool
}

func (v NullableTlsConfig) Get() *TlsConfig {
	return v.value
}

func (v *NullableTlsConfig) Set(val *TlsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsConfig(val *TlsConfig) *NullableTlsConfig {
	return &NullableTlsConfig{value: val, isSet: true}
}

func (v NullableTlsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


