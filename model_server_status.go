/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerStatus{}

// ServerStatus AdGuard Home server status and configuration
type ServerStatus struct {
	DnsAddresses []string `json:"dns_addresses"`
	DnsPort int32 `json:"dns_port"`
	HttpPort int32 `json:"http_port"`
	ProtectionEnabled bool `json:"protection_enabled"`
	ProtectionDisabledDuration *int64 `json:"protection_disabled_duration,omitempty"`
	DhcpAvailable *bool `json:"dhcp_available,omitempty"`
	Running bool `json:"running"`
	Version string `json:"version"`
	Language string `json:"language"`
}

type _ServerStatus ServerStatus

// NewServerStatus instantiates a new ServerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerStatus(dnsAddresses []string, dnsPort int32, httpPort int32, protectionEnabled bool, running bool, version string, language string) *ServerStatus {
	this := ServerStatus{}
	this.DnsAddresses = dnsAddresses
	this.DnsPort = dnsPort
	this.HttpPort = httpPort
	this.ProtectionEnabled = protectionEnabled
	this.Running = running
	this.Version = version
	this.Language = language
	return &this
}

// NewServerStatusWithDefaults instantiates a new ServerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerStatusWithDefaults() *ServerStatus {
	this := ServerStatus{}
	return &this
}

// GetDnsAddresses returns the DnsAddresses field value
func (o *ServerStatus) GetDnsAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DnsAddresses
}

// GetDnsAddressesOk returns a tuple with the DnsAddresses field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetDnsAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsAddresses, true
}

// SetDnsAddresses sets field value
func (o *ServerStatus) SetDnsAddresses(v []string) {
	o.DnsAddresses = v
}

// GetDnsPort returns the DnsPort field value
func (o *ServerStatus) GetDnsPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DnsPort
}

// GetDnsPortOk returns a tuple with the DnsPort field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetDnsPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsPort, true
}

// SetDnsPort sets field value
func (o *ServerStatus) SetDnsPort(v int32) {
	o.DnsPort = v
}

// GetHttpPort returns the HttpPort field value
func (o *ServerStatus) GetHttpPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HttpPort
}

// GetHttpPortOk returns a tuple with the HttpPort field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetHttpPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpPort, true
}

// SetHttpPort sets field value
func (o *ServerStatus) SetHttpPort(v int32) {
	o.HttpPort = v
}

// GetProtectionEnabled returns the ProtectionEnabled field value
func (o *ServerStatus) GetProtectionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ProtectionEnabled
}

// GetProtectionEnabledOk returns a tuple with the ProtectionEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetProtectionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectionEnabled, true
}

// SetProtectionEnabled sets field value
func (o *ServerStatus) SetProtectionEnabled(v bool) {
	o.ProtectionEnabled = v
}

// GetProtectionDisabledDuration returns the ProtectionDisabledDuration field value if set, zero value otherwise.
func (o *ServerStatus) GetProtectionDisabledDuration() int64 {
	if o == nil || IsNil(o.ProtectionDisabledDuration) {
		var ret int64
		return ret
	}
	return *o.ProtectionDisabledDuration
}

// GetProtectionDisabledDurationOk returns a tuple with the ProtectionDisabledDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetProtectionDisabledDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.ProtectionDisabledDuration) {
		return nil, false
	}
	return o.ProtectionDisabledDuration, true
}

// HasProtectionDisabledDuration returns a boolean if a field has been set.
func (o *ServerStatus) HasProtectionDisabledDuration() bool {
	if o != nil && !IsNil(o.ProtectionDisabledDuration) {
		return true
	}

	return false
}

// SetProtectionDisabledDuration gets a reference to the given int64 and assigns it to the ProtectionDisabledDuration field.
func (o *ServerStatus) SetProtectionDisabledDuration(v int64) {
	o.ProtectionDisabledDuration = &v
}

// GetDhcpAvailable returns the DhcpAvailable field value if set, zero value otherwise.
func (o *ServerStatus) GetDhcpAvailable() bool {
	if o == nil || IsNil(o.DhcpAvailable) {
		var ret bool
		return ret
	}
	return *o.DhcpAvailable
}

// GetDhcpAvailableOk returns a tuple with the DhcpAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetDhcpAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpAvailable) {
		return nil, false
	}
	return o.DhcpAvailable, true
}

// HasDhcpAvailable returns a boolean if a field has been set.
func (o *ServerStatus) HasDhcpAvailable() bool {
	if o != nil && !IsNil(o.DhcpAvailable) {
		return true
	}

	return false
}

// SetDhcpAvailable gets a reference to the given bool and assigns it to the DhcpAvailable field.
func (o *ServerStatus) SetDhcpAvailable(v bool) {
	o.DhcpAvailable = &v
}

// GetRunning returns the Running field value
func (o *ServerStatus) GetRunning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Running
}

// GetRunningOk returns a tuple with the Running field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetRunningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Running, true
}

// SetRunning sets field value
func (o *ServerStatus) SetRunning(v bool) {
	o.Running = v
}

// GetVersion returns the Version field value
func (o *ServerStatus) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ServerStatus) SetVersion(v string) {
	o.Version = v
}

// GetLanguage returns the Language field value
func (o *ServerStatus) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ServerStatus) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ServerStatus) SetLanguage(v string) {
	o.Language = v
}

func (o ServerStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns_addresses"] = o.DnsAddresses
	toSerialize["dns_port"] = o.DnsPort
	toSerialize["http_port"] = o.HttpPort
	toSerialize["protection_enabled"] = o.ProtectionEnabled
	if !IsNil(o.ProtectionDisabledDuration) {
		toSerialize["protection_disabled_duration"] = o.ProtectionDisabledDuration
	}
	if !IsNil(o.DhcpAvailable) {
		toSerialize["dhcp_available"] = o.DhcpAvailable
	}
	toSerialize["running"] = o.Running
	toSerialize["version"] = o.Version
	toSerialize["language"] = o.Language
	return toSerialize, nil
}

func (o *ServerStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns_addresses",
		"dns_port",
		"http_port",
		"protection_enabled",
		"running",
		"version",
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerStatus := _ServerStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerStatus)

	if err != nil {
		return err
	}

	*o = ServerStatus(varServerStatus)

	return err
}

type NullableServerStatus struct {
	value *ServerStatus
	isSet bool
}

func (v NullableServerStatus) Get() *ServerStatus {
	return v.value
}

func (v *NullableServerStatus) Set(val *ServerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerStatus(val *ServerStatus) *NullableServerStatus {
	return &NullableServerStatus{value: val, isSet: true}
}

func (v NullableServerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


