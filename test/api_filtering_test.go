/*
AdGuard Home

Testing FilteringAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/flowline-io/sdk-adguard-home-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_FilteringAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FilteringAPIService FilteringAddURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FilteringAPI.FilteringAddURL(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringCheckHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FilteringAPI.FilteringCheckHost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FilteringAPI.FilteringConfig(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringRefresh", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FilteringAPI.FilteringRefresh(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringRemoveURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FilteringAPI.FilteringRemoveURL(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringSetRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FilteringAPI.FilteringSetRules(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringSetURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FilteringAPI.FilteringSetURL(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilteringAPIService FilteringStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FilteringAPI.FilteringStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
