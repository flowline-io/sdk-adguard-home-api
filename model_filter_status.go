/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterStatus{}

// FilterStatus Filtering settings
type FilterStatus struct {
	Enabled *bool `json:"enabled,omitempty"`
	Interval *int32 `json:"interval,omitempty"`
	Filters []Filter `json:"filters,omitempty"`
	WhitelistFilters []Filter `json:"whitelist_filters,omitempty"`
	UserRules []string `json:"user_rules,omitempty"`
}

// NewFilterStatus instantiates a new FilterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterStatus() *FilterStatus {
	this := FilterStatus{}
	return &this
}

// NewFilterStatusWithDefaults instantiates a new FilterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterStatusWithDefaults() *FilterStatus {
	this := FilterStatus{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FilterStatus) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FilterStatus) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FilterStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *FilterStatus) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterStatus) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *FilterStatus) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *FilterStatus) SetInterval(v int32) {
	o.Interval = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *FilterStatus) GetFilters() []Filter {
	if o == nil || IsNil(o.Filters) {
		var ret []Filter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterStatus) GetFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *FilterStatus) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []Filter and assigns it to the Filters field.
func (o *FilterStatus) SetFilters(v []Filter) {
	o.Filters = v
}

// GetWhitelistFilters returns the WhitelistFilters field value if set, zero value otherwise.
func (o *FilterStatus) GetWhitelistFilters() []Filter {
	if o == nil || IsNil(o.WhitelistFilters) {
		var ret []Filter
		return ret
	}
	return o.WhitelistFilters
}

// GetWhitelistFiltersOk returns a tuple with the WhitelistFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterStatus) GetWhitelistFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.WhitelistFilters) {
		return nil, false
	}
	return o.WhitelistFilters, true
}

// HasWhitelistFilters returns a boolean if a field has been set.
func (o *FilterStatus) HasWhitelistFilters() bool {
	if o != nil && !IsNil(o.WhitelistFilters) {
		return true
	}

	return false
}

// SetWhitelistFilters gets a reference to the given []Filter and assigns it to the WhitelistFilters field.
func (o *FilterStatus) SetWhitelistFilters(v []Filter) {
	o.WhitelistFilters = v
}

// GetUserRules returns the UserRules field value if set, zero value otherwise.
func (o *FilterStatus) GetUserRules() []string {
	if o == nil || IsNil(o.UserRules) {
		var ret []string
		return ret
	}
	return o.UserRules
}

// GetUserRulesOk returns a tuple with the UserRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterStatus) GetUserRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.UserRules) {
		return nil, false
	}
	return o.UserRules, true
}

// HasUserRules returns a boolean if a field has been set.
func (o *FilterStatus) HasUserRules() bool {
	if o != nil && !IsNil(o.UserRules) {
		return true
	}

	return false
}

// SetUserRules gets a reference to the given []string and assigns it to the UserRules field.
func (o *FilterStatus) SetUserRules(v []string) {
	o.UserRules = v
}

func (o FilterStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.WhitelistFilters) {
		toSerialize["whitelist_filters"] = o.WhitelistFilters
	}
	if !IsNil(o.UserRules) {
		toSerialize["user_rules"] = o.UserRules
	}
	return toSerialize, nil
}

type NullableFilterStatus struct {
	value *FilterStatus
	isSet bool
}

func (v NullableFilterStatus) Get() *FilterStatus {
	return v.value
}

func (v *NullableFilterStatus) Set(val *FilterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterStatus(val *FilterStatus) *NullableFilterStatus {
	return &NullableFilterStatus{value: val, isSet: true}
}

func (v NullableFilterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


