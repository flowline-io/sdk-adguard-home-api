/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpstreamsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpstreamsConfig{}

// UpstreamsConfig Upstream configuration to be tested
type UpstreamsConfig struct {
	// Bootstrap DNS servers, port is optional after colon. 
	BootstrapDns []string `json:"bootstrap_dns"`
	// Upstream DNS servers, port is optional after colon. 
	UpstreamDns []string `json:"upstream_dns"`
	// Fallback DNS servers, port is optional after colon. 
	FallbackDns []string `json:"fallback_dns,omitempty"`
	// Local PTR resolvers, port is optional after colon. 
	PrivateUpstream []string `json:"private_upstream,omitempty"`
}

type _UpstreamsConfig UpstreamsConfig

// NewUpstreamsConfig instantiates a new UpstreamsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstreamsConfig(bootstrapDns []string, upstreamDns []string) *UpstreamsConfig {
	this := UpstreamsConfig{}
	this.BootstrapDns = bootstrapDns
	this.UpstreamDns = upstreamDns
	return &this
}

// NewUpstreamsConfigWithDefaults instantiates a new UpstreamsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamsConfigWithDefaults() *UpstreamsConfig {
	this := UpstreamsConfig{}
	return &this
}

// GetBootstrapDns returns the BootstrapDns field value
func (o *UpstreamsConfig) GetBootstrapDns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BootstrapDns
}

// GetBootstrapDnsOk returns a tuple with the BootstrapDns field value
// and a boolean to check if the value has been set.
func (o *UpstreamsConfig) GetBootstrapDnsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BootstrapDns, true
}

// SetBootstrapDns sets field value
func (o *UpstreamsConfig) SetBootstrapDns(v []string) {
	o.BootstrapDns = v
}

// GetUpstreamDns returns the UpstreamDns field value
func (o *UpstreamsConfig) GetUpstreamDns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UpstreamDns
}

// GetUpstreamDnsOk returns a tuple with the UpstreamDns field value
// and a boolean to check if the value has been set.
func (o *UpstreamsConfig) GetUpstreamDnsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpstreamDns, true
}

// SetUpstreamDns sets field value
func (o *UpstreamsConfig) SetUpstreamDns(v []string) {
	o.UpstreamDns = v
}

// GetFallbackDns returns the FallbackDns field value if set, zero value otherwise.
func (o *UpstreamsConfig) GetFallbackDns() []string {
	if o == nil || IsNil(o.FallbackDns) {
		var ret []string
		return ret
	}
	return o.FallbackDns
}

// GetFallbackDnsOk returns a tuple with the FallbackDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamsConfig) GetFallbackDnsOk() ([]string, bool) {
	if o == nil || IsNil(o.FallbackDns) {
		return nil, false
	}
	return o.FallbackDns, true
}

// HasFallbackDns returns a boolean if a field has been set.
func (o *UpstreamsConfig) HasFallbackDns() bool {
	if o != nil && !IsNil(o.FallbackDns) {
		return true
	}

	return false
}

// SetFallbackDns gets a reference to the given []string and assigns it to the FallbackDns field.
func (o *UpstreamsConfig) SetFallbackDns(v []string) {
	o.FallbackDns = v
}

// GetPrivateUpstream returns the PrivateUpstream field value if set, zero value otherwise.
func (o *UpstreamsConfig) GetPrivateUpstream() []string {
	if o == nil || IsNil(o.PrivateUpstream) {
		var ret []string
		return ret
	}
	return o.PrivateUpstream
}

// GetPrivateUpstreamOk returns a tuple with the PrivateUpstream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamsConfig) GetPrivateUpstreamOk() ([]string, bool) {
	if o == nil || IsNil(o.PrivateUpstream) {
		return nil, false
	}
	return o.PrivateUpstream, true
}

// HasPrivateUpstream returns a boolean if a field has been set.
func (o *UpstreamsConfig) HasPrivateUpstream() bool {
	if o != nil && !IsNil(o.PrivateUpstream) {
		return true
	}

	return false
}

// SetPrivateUpstream gets a reference to the given []string and assigns it to the PrivateUpstream field.
func (o *UpstreamsConfig) SetPrivateUpstream(v []string) {
	o.PrivateUpstream = v
}

func (o UpstreamsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpstreamsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bootstrap_dns"] = o.BootstrapDns
	toSerialize["upstream_dns"] = o.UpstreamDns
	if !IsNil(o.FallbackDns) {
		toSerialize["fallback_dns"] = o.FallbackDns
	}
	if !IsNil(o.PrivateUpstream) {
		toSerialize["private_upstream"] = o.PrivateUpstream
	}
	return toSerialize, nil
}

func (o *UpstreamsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bootstrap_dns",
		"upstream_dns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpstreamsConfig := _UpstreamsConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpstreamsConfig)

	if err != nil {
		return err
	}

	*o = UpstreamsConfig(varUpstreamsConfig)

	return err
}

type NullableUpstreamsConfig struct {
	value *UpstreamsConfig
	isSet bool
}

func (v NullableUpstreamsConfig) Get() *UpstreamsConfig {
	return v.value
}

func (v *NullableUpstreamsConfig) Set(val *UpstreamsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstreamsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstreamsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstreamsConfig(val *UpstreamsConfig) *NullableUpstreamsConfig {
	return &NullableUpstreamsConfig{value: val, isSet: true}
}

func (v NullableUpstreamsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstreamsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


