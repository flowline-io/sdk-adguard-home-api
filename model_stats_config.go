/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsConfig{}

// StatsConfig Statistics configuration
type StatsConfig struct {
	// Time period to keep the data.  `0` means that the statistics is disabled. 
	Interval *int32 `json:"interval,omitempty"`
}

// NewStatsConfig instantiates a new StatsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsConfig() *StatsConfig {
	this := StatsConfig{}
	return &this
}

// NewStatsConfigWithDefaults instantiates a new StatsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsConfigWithDefaults() *StatsConfig {
	this := StatsConfig{}
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *StatsConfig) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsConfig) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *StatsConfig) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *StatsConfig) SetInterval(v int32) {
	o.Interval = &v
}

func (o StatsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	return toSerialize, nil
}

type NullableStatsConfig struct {
	value *StatsConfig
	isSet bool
}

func (v NullableStatsConfig) Get() *StatsConfig {
	return v.value
}

func (v *NullableStatsConfig) Set(val *StatsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsConfig(val *StatsConfig) *NullableStatsConfig {
	return &NullableStatsConfig{value: val, isSet: true}
}

func (v NullableStatsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


