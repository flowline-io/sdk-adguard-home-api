/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Client type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Client{}

// Client Client information.
type Client struct {
	// Name
	Name *string `json:"name,omitempty"`
	// IP, CIDR, MAC, or ClientID.
	Ids []string `json:"ids,omitempty"`
	UseGlobalSettings *bool `json:"use_global_settings,omitempty"`
	FilteringEnabled *bool `json:"filtering_enabled,omitempty"`
	ParentalEnabled *bool `json:"parental_enabled,omitempty"`
	SafebrowsingEnabled *bool `json:"safebrowsing_enabled,omitempty"`
	// Deprecated
	SafesearchEnabled *bool `json:"safesearch_enabled,omitempty"`
	SafeSearch *SafeSearchConfig `json:"safe_search,omitempty"`
	UseGlobalBlockedServices *bool `json:"use_global_blocked_services,omitempty"`
	BlockedServicesSchedule *Schedule `json:"blocked_services_schedule,omitempty"`
	BlockedServices []string `json:"blocked_services,omitempty"`
	Upstreams []string `json:"upstreams,omitempty"`
	Tags []string `json:"tags,omitempty"`
	// NOTE: If `ignore_querylog` is not set in HTTP API `GET /clients/add` request then default value (false) will be used.  If `ignore_querylog` is not set in HTTP API `GET /clients/update` request then the existing value will not be changed.  This behaviour can be changed in the future versions. 
	IgnoreQuerylog *bool `json:"ignore_querylog,omitempty"`
	// NOTE: If `ignore_statistics` is not set in HTTP API `GET /clients/add` request then default value (false) will be used.  If `ignore_statistics` is not set in HTTP API `GET /clients/update` request then the existing value will not be changed.  This behaviour can be changed in the future versions. 
	IgnoreStatistics *bool `json:"ignore_statistics,omitempty"`
	// NOTE: If `upstreams_cache_enabled` is not set in HTTP API `GET /clients/add` request then default value (false) will be used.  If `upstreams_cache_enabled` is not set in HTTP API `GET /clients/update` request then the existing value will not be changed.  This behaviour can be changed in the future versions. 
	UpstreamsCacheEnabled *bool `json:"upstreams_cache_enabled,omitempty"`
	// NOTE: If `upstreams_cache_enabled` is not set in HTTP API `GET /clients/update` request then the existing value will not be changed.  This behaviour can be changed in the future versions. 
	UpstreamsCacheSize *int32 `json:"upstreams_cache_size,omitempty"`
}

// NewClient instantiates a new Client object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClient() *Client {
	this := Client{}
	return &this
}

// NewClientWithDefaults instantiates a new Client object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientWithDefaults() *Client {
	this := Client{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Client) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Client) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Client) SetName(v string) {
	o.Name = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *Client) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *Client) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *Client) SetIds(v []string) {
	o.Ids = v
}

// GetUseGlobalSettings returns the UseGlobalSettings field value if set, zero value otherwise.
func (o *Client) GetUseGlobalSettings() bool {
	if o == nil || IsNil(o.UseGlobalSettings) {
		var ret bool
		return ret
	}
	return *o.UseGlobalSettings
}

// GetUseGlobalSettingsOk returns a tuple with the UseGlobalSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetUseGlobalSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGlobalSettings) {
		return nil, false
	}
	return o.UseGlobalSettings, true
}

// HasUseGlobalSettings returns a boolean if a field has been set.
func (o *Client) HasUseGlobalSettings() bool {
	if o != nil && !IsNil(o.UseGlobalSettings) {
		return true
	}

	return false
}

// SetUseGlobalSettings gets a reference to the given bool and assigns it to the UseGlobalSettings field.
func (o *Client) SetUseGlobalSettings(v bool) {
	o.UseGlobalSettings = &v
}

// GetFilteringEnabled returns the FilteringEnabled field value if set, zero value otherwise.
func (o *Client) GetFilteringEnabled() bool {
	if o == nil || IsNil(o.FilteringEnabled) {
		var ret bool
		return ret
	}
	return *o.FilteringEnabled
}

// GetFilteringEnabledOk returns a tuple with the FilteringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetFilteringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FilteringEnabled) {
		return nil, false
	}
	return o.FilteringEnabled, true
}

// HasFilteringEnabled returns a boolean if a field has been set.
func (o *Client) HasFilteringEnabled() bool {
	if o != nil && !IsNil(o.FilteringEnabled) {
		return true
	}

	return false
}

// SetFilteringEnabled gets a reference to the given bool and assigns it to the FilteringEnabled field.
func (o *Client) SetFilteringEnabled(v bool) {
	o.FilteringEnabled = &v
}

// GetParentalEnabled returns the ParentalEnabled field value if set, zero value otherwise.
func (o *Client) GetParentalEnabled() bool {
	if o == nil || IsNil(o.ParentalEnabled) {
		var ret bool
		return ret
	}
	return *o.ParentalEnabled
}

// GetParentalEnabledOk returns a tuple with the ParentalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetParentalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ParentalEnabled) {
		return nil, false
	}
	return o.ParentalEnabled, true
}

// HasParentalEnabled returns a boolean if a field has been set.
func (o *Client) HasParentalEnabled() bool {
	if o != nil && !IsNil(o.ParentalEnabled) {
		return true
	}

	return false
}

// SetParentalEnabled gets a reference to the given bool and assigns it to the ParentalEnabled field.
func (o *Client) SetParentalEnabled(v bool) {
	o.ParentalEnabled = &v
}

// GetSafebrowsingEnabled returns the SafebrowsingEnabled field value if set, zero value otherwise.
func (o *Client) GetSafebrowsingEnabled() bool {
	if o == nil || IsNil(o.SafebrowsingEnabled) {
		var ret bool
		return ret
	}
	return *o.SafebrowsingEnabled
}

// GetSafebrowsingEnabledOk returns a tuple with the SafebrowsingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetSafebrowsingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SafebrowsingEnabled) {
		return nil, false
	}
	return o.SafebrowsingEnabled, true
}

// HasSafebrowsingEnabled returns a boolean if a field has been set.
func (o *Client) HasSafebrowsingEnabled() bool {
	if o != nil && !IsNil(o.SafebrowsingEnabled) {
		return true
	}

	return false
}

// SetSafebrowsingEnabled gets a reference to the given bool and assigns it to the SafebrowsingEnabled field.
func (o *Client) SetSafebrowsingEnabled(v bool) {
	o.SafebrowsingEnabled = &v
}

// GetSafesearchEnabled returns the SafesearchEnabled field value if set, zero value otherwise.
// Deprecated
func (o *Client) GetSafesearchEnabled() bool {
	if o == nil || IsNil(o.SafesearchEnabled) {
		var ret bool
		return ret
	}
	return *o.SafesearchEnabled
}

// GetSafesearchEnabledOk returns a tuple with the SafesearchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Client) GetSafesearchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SafesearchEnabled) {
		return nil, false
	}
	return o.SafesearchEnabled, true
}

// HasSafesearchEnabled returns a boolean if a field has been set.
func (o *Client) HasSafesearchEnabled() bool {
	if o != nil && !IsNil(o.SafesearchEnabled) {
		return true
	}

	return false
}

// SetSafesearchEnabled gets a reference to the given bool and assigns it to the SafesearchEnabled field.
// Deprecated
func (o *Client) SetSafesearchEnabled(v bool) {
	o.SafesearchEnabled = &v
}

// GetSafeSearch returns the SafeSearch field value if set, zero value otherwise.
func (o *Client) GetSafeSearch() SafeSearchConfig {
	if o == nil || IsNil(o.SafeSearch) {
		var ret SafeSearchConfig
		return ret
	}
	return *o.SafeSearch
}

// GetSafeSearchOk returns a tuple with the SafeSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetSafeSearchOk() (*SafeSearchConfig, bool) {
	if o == nil || IsNil(o.SafeSearch) {
		return nil, false
	}
	return o.SafeSearch, true
}

// HasSafeSearch returns a boolean if a field has been set.
func (o *Client) HasSafeSearch() bool {
	if o != nil && !IsNil(o.SafeSearch) {
		return true
	}

	return false
}

// SetSafeSearch gets a reference to the given SafeSearchConfig and assigns it to the SafeSearch field.
func (o *Client) SetSafeSearch(v SafeSearchConfig) {
	o.SafeSearch = &v
}

// GetUseGlobalBlockedServices returns the UseGlobalBlockedServices field value if set, zero value otherwise.
func (o *Client) GetUseGlobalBlockedServices() bool {
	if o == nil || IsNil(o.UseGlobalBlockedServices) {
		var ret bool
		return ret
	}
	return *o.UseGlobalBlockedServices
}

// GetUseGlobalBlockedServicesOk returns a tuple with the UseGlobalBlockedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetUseGlobalBlockedServicesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGlobalBlockedServices) {
		return nil, false
	}
	return o.UseGlobalBlockedServices, true
}

// HasUseGlobalBlockedServices returns a boolean if a field has been set.
func (o *Client) HasUseGlobalBlockedServices() bool {
	if o != nil && !IsNil(o.UseGlobalBlockedServices) {
		return true
	}

	return false
}

// SetUseGlobalBlockedServices gets a reference to the given bool and assigns it to the UseGlobalBlockedServices field.
func (o *Client) SetUseGlobalBlockedServices(v bool) {
	o.UseGlobalBlockedServices = &v
}

// GetBlockedServicesSchedule returns the BlockedServicesSchedule field value if set, zero value otherwise.
func (o *Client) GetBlockedServicesSchedule() Schedule {
	if o == nil || IsNil(o.BlockedServicesSchedule) {
		var ret Schedule
		return ret
	}
	return *o.BlockedServicesSchedule
}

// GetBlockedServicesScheduleOk returns a tuple with the BlockedServicesSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetBlockedServicesScheduleOk() (*Schedule, bool) {
	if o == nil || IsNil(o.BlockedServicesSchedule) {
		return nil, false
	}
	return o.BlockedServicesSchedule, true
}

// HasBlockedServicesSchedule returns a boolean if a field has been set.
func (o *Client) HasBlockedServicesSchedule() bool {
	if o != nil && !IsNil(o.BlockedServicesSchedule) {
		return true
	}

	return false
}

// SetBlockedServicesSchedule gets a reference to the given Schedule and assigns it to the BlockedServicesSchedule field.
func (o *Client) SetBlockedServicesSchedule(v Schedule) {
	o.BlockedServicesSchedule = &v
}

// GetBlockedServices returns the BlockedServices field value if set, zero value otherwise.
func (o *Client) GetBlockedServices() []string {
	if o == nil || IsNil(o.BlockedServices) {
		var ret []string
		return ret
	}
	return o.BlockedServices
}

// GetBlockedServicesOk returns a tuple with the BlockedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetBlockedServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedServices) {
		return nil, false
	}
	return o.BlockedServices, true
}

// HasBlockedServices returns a boolean if a field has been set.
func (o *Client) HasBlockedServices() bool {
	if o != nil && !IsNil(o.BlockedServices) {
		return true
	}

	return false
}

// SetBlockedServices gets a reference to the given []string and assigns it to the BlockedServices field.
func (o *Client) SetBlockedServices(v []string) {
	o.BlockedServices = v
}

// GetUpstreams returns the Upstreams field value if set, zero value otherwise.
func (o *Client) GetUpstreams() []string {
	if o == nil || IsNil(o.Upstreams) {
		var ret []string
		return ret
	}
	return o.Upstreams
}

// GetUpstreamsOk returns a tuple with the Upstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetUpstreamsOk() ([]string, bool) {
	if o == nil || IsNil(o.Upstreams) {
		return nil, false
	}
	return o.Upstreams, true
}

// HasUpstreams returns a boolean if a field has been set.
func (o *Client) HasUpstreams() bool {
	if o != nil && !IsNil(o.Upstreams) {
		return true
	}

	return false
}

// SetUpstreams gets a reference to the given []string and assigns it to the Upstreams field.
func (o *Client) SetUpstreams(v []string) {
	o.Upstreams = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Client) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Client) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Client) SetTags(v []string) {
	o.Tags = v
}

// GetIgnoreQuerylog returns the IgnoreQuerylog field value if set, zero value otherwise.
func (o *Client) GetIgnoreQuerylog() bool {
	if o == nil || IsNil(o.IgnoreQuerylog) {
		var ret bool
		return ret
	}
	return *o.IgnoreQuerylog
}

// GetIgnoreQuerylogOk returns a tuple with the IgnoreQuerylog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetIgnoreQuerylogOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreQuerylog) {
		return nil, false
	}
	return o.IgnoreQuerylog, true
}

// HasIgnoreQuerylog returns a boolean if a field has been set.
func (o *Client) HasIgnoreQuerylog() bool {
	if o != nil && !IsNil(o.IgnoreQuerylog) {
		return true
	}

	return false
}

// SetIgnoreQuerylog gets a reference to the given bool and assigns it to the IgnoreQuerylog field.
func (o *Client) SetIgnoreQuerylog(v bool) {
	o.IgnoreQuerylog = &v
}

// GetIgnoreStatistics returns the IgnoreStatistics field value if set, zero value otherwise.
func (o *Client) GetIgnoreStatistics() bool {
	if o == nil || IsNil(o.IgnoreStatistics) {
		var ret bool
		return ret
	}
	return *o.IgnoreStatistics
}

// GetIgnoreStatisticsOk returns a tuple with the IgnoreStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetIgnoreStatisticsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreStatistics) {
		return nil, false
	}
	return o.IgnoreStatistics, true
}

// HasIgnoreStatistics returns a boolean if a field has been set.
func (o *Client) HasIgnoreStatistics() bool {
	if o != nil && !IsNil(o.IgnoreStatistics) {
		return true
	}

	return false
}

// SetIgnoreStatistics gets a reference to the given bool and assigns it to the IgnoreStatistics field.
func (o *Client) SetIgnoreStatistics(v bool) {
	o.IgnoreStatistics = &v
}

// GetUpstreamsCacheEnabled returns the UpstreamsCacheEnabled field value if set, zero value otherwise.
func (o *Client) GetUpstreamsCacheEnabled() bool {
	if o == nil || IsNil(o.UpstreamsCacheEnabled) {
		var ret bool
		return ret
	}
	return *o.UpstreamsCacheEnabled
}

// GetUpstreamsCacheEnabledOk returns a tuple with the UpstreamsCacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetUpstreamsCacheEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UpstreamsCacheEnabled) {
		return nil, false
	}
	return o.UpstreamsCacheEnabled, true
}

// HasUpstreamsCacheEnabled returns a boolean if a field has been set.
func (o *Client) HasUpstreamsCacheEnabled() bool {
	if o != nil && !IsNil(o.UpstreamsCacheEnabled) {
		return true
	}

	return false
}

// SetUpstreamsCacheEnabled gets a reference to the given bool and assigns it to the UpstreamsCacheEnabled field.
func (o *Client) SetUpstreamsCacheEnabled(v bool) {
	o.UpstreamsCacheEnabled = &v
}

// GetUpstreamsCacheSize returns the UpstreamsCacheSize field value if set, zero value otherwise.
func (o *Client) GetUpstreamsCacheSize() int32 {
	if o == nil || IsNil(o.UpstreamsCacheSize) {
		var ret int32
		return ret
	}
	return *o.UpstreamsCacheSize
}

// GetUpstreamsCacheSizeOk returns a tuple with the UpstreamsCacheSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Client) GetUpstreamsCacheSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.UpstreamsCacheSize) {
		return nil, false
	}
	return o.UpstreamsCacheSize, true
}

// HasUpstreamsCacheSize returns a boolean if a field has been set.
func (o *Client) HasUpstreamsCacheSize() bool {
	if o != nil && !IsNil(o.UpstreamsCacheSize) {
		return true
	}

	return false
}

// SetUpstreamsCacheSize gets a reference to the given int32 and assigns it to the UpstreamsCacheSize field.
func (o *Client) SetUpstreamsCacheSize(v int32) {
	o.UpstreamsCacheSize = &v
}

func (o Client) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Client) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.UseGlobalSettings) {
		toSerialize["use_global_settings"] = o.UseGlobalSettings
	}
	if !IsNil(o.FilteringEnabled) {
		toSerialize["filtering_enabled"] = o.FilteringEnabled
	}
	if !IsNil(o.ParentalEnabled) {
		toSerialize["parental_enabled"] = o.ParentalEnabled
	}
	if !IsNil(o.SafebrowsingEnabled) {
		toSerialize["safebrowsing_enabled"] = o.SafebrowsingEnabled
	}
	if !IsNil(o.SafesearchEnabled) {
		toSerialize["safesearch_enabled"] = o.SafesearchEnabled
	}
	if !IsNil(o.SafeSearch) {
		toSerialize["safe_search"] = o.SafeSearch
	}
	if !IsNil(o.UseGlobalBlockedServices) {
		toSerialize["use_global_blocked_services"] = o.UseGlobalBlockedServices
	}
	if !IsNil(o.BlockedServicesSchedule) {
		toSerialize["blocked_services_schedule"] = o.BlockedServicesSchedule
	}
	if !IsNil(o.BlockedServices) {
		toSerialize["blocked_services"] = o.BlockedServices
	}
	if !IsNil(o.Upstreams) {
		toSerialize["upstreams"] = o.Upstreams
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IgnoreQuerylog) {
		toSerialize["ignore_querylog"] = o.IgnoreQuerylog
	}
	if !IsNil(o.IgnoreStatistics) {
		toSerialize["ignore_statistics"] = o.IgnoreStatistics
	}
	if !IsNil(o.UpstreamsCacheEnabled) {
		toSerialize["upstreams_cache_enabled"] = o.UpstreamsCacheEnabled
	}
	if !IsNil(o.UpstreamsCacheSize) {
		toSerialize["upstreams_cache_size"] = o.UpstreamsCacheSize
	}
	return toSerialize, nil
}

type NullableClient struct {
	value *Client
	isSet bool
}

func (v NullableClient) Get() *Client {
	return v.value
}

func (v *NullableClient) Set(val *Client) {
	v.value = val
	v.isSet = true
}

func (v NullableClient) IsSet() bool {
	return v.isSet
}

func (v *NullableClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClient(val *Client) *NullableClient {
	return &NullableClient{value: val, isSet: true}
}

func (v NullableClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


