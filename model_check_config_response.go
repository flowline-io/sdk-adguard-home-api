/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckConfigResponse{}

// CheckConfigResponse struct for CheckConfigResponse
type CheckConfigResponse struct {
	Dns CheckConfigResponseInfo `json:"dns"`
	Web CheckConfigResponseInfo `json:"web"`
	StaticIp CheckConfigStaticIpInfo `json:"static_ip"`
}

type _CheckConfigResponse CheckConfigResponse

// NewCheckConfigResponse instantiates a new CheckConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckConfigResponse(dns CheckConfigResponseInfo, web CheckConfigResponseInfo, staticIp CheckConfigStaticIpInfo) *CheckConfigResponse {
	this := CheckConfigResponse{}
	this.Dns = dns
	this.Web = web
	this.StaticIp = staticIp
	return &this
}

// NewCheckConfigResponseWithDefaults instantiates a new CheckConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckConfigResponseWithDefaults() *CheckConfigResponse {
	this := CheckConfigResponse{}
	return &this
}

// GetDns returns the Dns field value
func (o *CheckConfigResponse) GetDns() CheckConfigResponseInfo {
	if o == nil {
		var ret CheckConfigResponseInfo
		return ret
	}

	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value
// and a boolean to check if the value has been set.
func (o *CheckConfigResponse) GetDnsOk() (*CheckConfigResponseInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dns, true
}

// SetDns sets field value
func (o *CheckConfigResponse) SetDns(v CheckConfigResponseInfo) {
	o.Dns = v
}

// GetWeb returns the Web field value
func (o *CheckConfigResponse) GetWeb() CheckConfigResponseInfo {
	if o == nil {
		var ret CheckConfigResponseInfo
		return ret
	}

	return o.Web
}

// GetWebOk returns a tuple with the Web field value
// and a boolean to check if the value has been set.
func (o *CheckConfigResponse) GetWebOk() (*CheckConfigResponseInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Web, true
}

// SetWeb sets field value
func (o *CheckConfigResponse) SetWeb(v CheckConfigResponseInfo) {
	o.Web = v
}

// GetStaticIp returns the StaticIp field value
func (o *CheckConfigResponse) GetStaticIp() CheckConfigStaticIpInfo {
	if o == nil {
		var ret CheckConfigStaticIpInfo
		return ret
	}

	return o.StaticIp
}

// GetStaticIpOk returns a tuple with the StaticIp field value
// and a boolean to check if the value has been set.
func (o *CheckConfigResponse) GetStaticIpOk() (*CheckConfigStaticIpInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StaticIp, true
}

// SetStaticIp sets field value
func (o *CheckConfigResponse) SetStaticIp(v CheckConfigStaticIpInfo) {
	o.StaticIp = v
}

func (o CheckConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns"] = o.Dns
	toSerialize["web"] = o.Web
	toSerialize["static_ip"] = o.StaticIp
	return toSerialize, nil
}

func (o *CheckConfigResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns",
		"web",
		"static_ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckConfigResponse := _CheckConfigResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckConfigResponse)

	if err != nil {
		return err
	}

	*o = CheckConfigResponse(varCheckConfigResponse)

	return err
}

type NullableCheckConfigResponse struct {
	value *CheckConfigResponse
	isSet bool
}

func (v NullableCheckConfigResponse) Get() *CheckConfigResponse {
	return v.value
}

func (v *NullableCheckConfigResponse) Set(val *CheckConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckConfigResponse(val *CheckConfigResponse) *NullableCheckConfigResponse {
	return &NullableCheckConfigResponse{value: val, isSet: true}
}

func (v NullableCheckConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


