/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResultRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultRule{}

// ResultRule Applied rule.
type ResultRule struct {
	// In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to. 
	FilterListId *int64 `json:"filter_list_id,omitempty"`
	// The text of the filtering rule applied to the request (if any). 
	Text *string `json:"text,omitempty"`
}

// NewResultRule instantiates a new ResultRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultRule() *ResultRule {
	this := ResultRule{}
	return &this
}

// NewResultRuleWithDefaults instantiates a new ResultRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultRuleWithDefaults() *ResultRule {
	this := ResultRule{}
	return &this
}

// GetFilterListId returns the FilterListId field value if set, zero value otherwise.
func (o *ResultRule) GetFilterListId() int64 {
	if o == nil || IsNil(o.FilterListId) {
		var ret int64
		return ret
	}
	return *o.FilterListId
}

// GetFilterListIdOk returns a tuple with the FilterListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultRule) GetFilterListIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FilterListId) {
		return nil, false
	}
	return o.FilterListId, true
}

// HasFilterListId returns a boolean if a field has been set.
func (o *ResultRule) HasFilterListId() bool {
	if o != nil && !IsNil(o.FilterListId) {
		return true
	}

	return false
}

// SetFilterListId gets a reference to the given int64 and assigns it to the FilterListId field.
func (o *ResultRule) SetFilterListId(v int64) {
	o.FilterListId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ResultRule) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultRule) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ResultRule) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ResultRule) SetText(v string) {
	o.Text = &v
}

func (o ResultRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterListId) {
		toSerialize["filter_list_id"] = o.FilterListId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableResultRule struct {
	value *ResultRule
	isSet bool
}

func (v NullableResultRule) Get() *ResultRule {
	return v.value
}

func (v *NullableResultRule) Set(val *ResultRule) {
	v.value = val
	v.isSet = true
}

func (v NullableResultRule) IsSet() bool {
	return v.isSet
}

func (v *NullableResultRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultRule(val *ResultRule) *NullableResultRule {
	return &NullableResultRule{value: val, isSet: true}
}

func (v NullableResultRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


