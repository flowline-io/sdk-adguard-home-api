/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CheckConfigStaticIpInfoStatic Can be: yes, no, error
type CheckConfigStaticIpInfoStatic string

// List of CheckConfigStaticIpInfoStatic
const (
	YES CheckConfigStaticIpInfoStatic = "yes"
	NO CheckConfigStaticIpInfoStatic = "no"
	ERROR CheckConfigStaticIpInfoStatic = "error"
)

// All allowed values of CheckConfigStaticIpInfoStatic enum
var AllowedCheckConfigStaticIpInfoStaticEnumValues = []CheckConfigStaticIpInfoStatic{
	"yes",
	"no",
	"error",
}

func (v *CheckConfigStaticIpInfoStatic) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CheckConfigStaticIpInfoStatic(value)
	for _, existing := range AllowedCheckConfigStaticIpInfoStaticEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CheckConfigStaticIpInfoStatic", value)
}

// NewCheckConfigStaticIpInfoStaticFromValue returns a pointer to a valid CheckConfigStaticIpInfoStatic
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCheckConfigStaticIpInfoStaticFromValue(v string) (*CheckConfigStaticIpInfoStatic, error) {
	ev := CheckConfigStaticIpInfoStatic(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CheckConfigStaticIpInfoStatic: valid values are %v", v, AllowedCheckConfigStaticIpInfoStaticEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CheckConfigStaticIpInfoStatic) IsValid() bool {
	for _, existing := range AllowedCheckConfigStaticIpInfoStaticEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CheckConfigStaticIpInfoStatic value
func (v CheckConfigStaticIpInfoStatic) Ptr() *CheckConfigStaticIpInfoStatic {
	return &v
}

type NullableCheckConfigStaticIpInfoStatic struct {
	value *CheckConfigStaticIpInfoStatic
	isSet bool
}

func (v NullableCheckConfigStaticIpInfoStatic) Get() *CheckConfigStaticIpInfoStatic {
	return v.value
}

func (v *NullableCheckConfigStaticIpInfoStatic) Set(val *CheckConfigStaticIpInfoStatic) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckConfigStaticIpInfoStatic) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckConfigStaticIpInfoStatic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckConfigStaticIpInfoStatic(val *CheckConfigStaticIpInfoStatic) *NullableCheckConfigStaticIpInfoStatic {
	return &NullableCheckConfigStaticIpInfoStatic{value: val, isSet: true}
}

func (v NullableCheckConfigStaticIpInfoStatic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckConfigStaticIpInfoStatic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

