/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RewriteUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewriteUpdate{}

// RewriteUpdate Rewrite rule update object
type RewriteUpdate struct {
	Target *RewriteEntry `json:"target,omitempty"`
	Update *RewriteEntry `json:"update,omitempty"`
}

// NewRewriteUpdate instantiates a new RewriteUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewriteUpdate() *RewriteUpdate {
	this := RewriteUpdate{}
	return &this
}

// NewRewriteUpdateWithDefaults instantiates a new RewriteUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewriteUpdateWithDefaults() *RewriteUpdate {
	this := RewriteUpdate{}
	return &this
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *RewriteUpdate) GetTarget() RewriteEntry {
	if o == nil || IsNil(o.Target) {
		var ret RewriteEntry
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewriteUpdate) GetTargetOk() (*RewriteEntry, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *RewriteUpdate) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given RewriteEntry and assigns it to the Target field.
func (o *RewriteUpdate) SetTarget(v RewriteEntry) {
	o.Target = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *RewriteUpdate) GetUpdate() RewriteEntry {
	if o == nil || IsNil(o.Update) {
		var ret RewriteEntry
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewriteUpdate) GetUpdateOk() (*RewriteEntry, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *RewriteUpdate) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given RewriteEntry and assigns it to the Update field.
func (o *RewriteUpdate) SetUpdate(v RewriteEntry) {
	o.Update = &v
}

func (o RewriteUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewriteUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	return toSerialize, nil
}

type NullableRewriteUpdate struct {
	value *RewriteUpdate
	isSet bool
}

func (v NullableRewriteUpdate) Get() *RewriteUpdate {
	return v.value
}

func (v *NullableRewriteUpdate) Set(val *RewriteUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRewriteUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRewriteUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewriteUpdate(val *RewriteUpdate) *NullableRewriteUpdate {
	return &NullableRewriteUpdate{value: val, isSet: true}
}

func (v NullableRewriteUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewriteUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


