/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClientDelete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientDelete{}

// ClientDelete Client delete request
type ClientDelete struct {
	Name *string `json:"name,omitempty"`
}

// NewClientDelete instantiates a new ClientDelete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientDelete() *ClientDelete {
	this := ClientDelete{}
	return &this
}

// NewClientDeleteWithDefaults instantiates a new ClientDelete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientDeleteWithDefaults() *ClientDelete {
	this := ClientDelete{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientDelete) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDelete) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientDelete) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientDelete) SetName(v string) {
	o.Name = &v
}

func (o ClientDelete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientDelete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableClientDelete struct {
	value *ClientDelete
	isSet bool
}

func (v NullableClientDelete) Get() *ClientDelete {
	return v.value
}

func (v *NullableClientDelete) Set(val *ClientDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableClientDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableClientDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientDelete(val *ClientDelete) *NullableClientDelete {
	return &NullableClientDelete{value: val, isSet: true}
}

func (v NullableClientDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


