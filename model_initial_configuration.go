/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InitialConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitialConfiguration{}

// InitialConfiguration AdGuard Home initial configuration for the first-install wizard. 
type InitialConfiguration struct {
	Dns AddressInfo `json:"dns"`
	Web AddressInfo `json:"web"`
	// Basic auth username
	Username string `json:"username"`
	// Basic auth password
	Password string `json:"password"`
}

type _InitialConfiguration InitialConfiguration

// NewInitialConfiguration instantiates a new InitialConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitialConfiguration(dns AddressInfo, web AddressInfo, username string, password string) *InitialConfiguration {
	this := InitialConfiguration{}
	this.Dns = dns
	this.Web = web
	this.Username = username
	this.Password = password
	return &this
}

// NewInitialConfigurationWithDefaults instantiates a new InitialConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitialConfigurationWithDefaults() *InitialConfiguration {
	this := InitialConfiguration{}
	return &this
}

// GetDns returns the Dns field value
func (o *InitialConfiguration) GetDns() AddressInfo {
	if o == nil {
		var ret AddressInfo
		return ret
	}

	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value
// and a boolean to check if the value has been set.
func (o *InitialConfiguration) GetDnsOk() (*AddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dns, true
}

// SetDns sets field value
func (o *InitialConfiguration) SetDns(v AddressInfo) {
	o.Dns = v
}

// GetWeb returns the Web field value
func (o *InitialConfiguration) GetWeb() AddressInfo {
	if o == nil {
		var ret AddressInfo
		return ret
	}

	return o.Web
}

// GetWebOk returns a tuple with the Web field value
// and a boolean to check if the value has been set.
func (o *InitialConfiguration) GetWebOk() (*AddressInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Web, true
}

// SetWeb sets field value
func (o *InitialConfiguration) SetWeb(v AddressInfo) {
	o.Web = v
}

// GetUsername returns the Username field value
func (o *InitialConfiguration) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *InitialConfiguration) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *InitialConfiguration) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *InitialConfiguration) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *InitialConfiguration) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *InitialConfiguration) SetPassword(v string) {
	o.Password = v
}

func (o InitialConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitialConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns"] = o.Dns
	toSerialize["web"] = o.Web
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *InitialConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns",
		"web",
		"username",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInitialConfiguration := _InitialConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInitialConfiguration)

	if err != nil {
		return err
	}

	*o = InitialConfiguration(varInitialConfiguration)

	return err
}

type NullableInitialConfiguration struct {
	value *InitialConfiguration
	isSet bool
}

func (v NullableInitialConfiguration) Get() *InitialConfiguration {
	return v.value
}

func (v *NullableInitialConfiguration) Set(val *InitialConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialConfiguration(val *InitialConfiguration) *NullableInitialConfiguration {
	return &NullableInitialConfiguration{value: val, isSet: true}
}

func (v NullableInitialConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


