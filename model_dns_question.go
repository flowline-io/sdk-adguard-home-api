/*
AdGuard Home

AdGuard Home REST-ish API.  Our admin web interface is built on top of this REST-ish API. 

API version: 0.107
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DnsQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsQuestion{}

// DnsQuestion DNS question section
type DnsQuestion struct {
	Class *string `json:"class,omitempty"`
	Name *string `json:"name,omitempty"`
	UnicodeName *string `json:"unicode_name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewDnsQuestion instantiates a new DnsQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsQuestion() *DnsQuestion {
	this := DnsQuestion{}
	return &this
}

// NewDnsQuestionWithDefaults instantiates a new DnsQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsQuestionWithDefaults() *DnsQuestion {
	this := DnsQuestion{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *DnsQuestion) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsQuestion) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *DnsQuestion) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *DnsQuestion) SetClass(v string) {
	o.Class = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DnsQuestion) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsQuestion) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DnsQuestion) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DnsQuestion) SetName(v string) {
	o.Name = &v
}

// GetUnicodeName returns the UnicodeName field value if set, zero value otherwise.
func (o *DnsQuestion) GetUnicodeName() string {
	if o == nil || IsNil(o.UnicodeName) {
		var ret string
		return ret
	}
	return *o.UnicodeName
}

// GetUnicodeNameOk returns a tuple with the UnicodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsQuestion) GetUnicodeNameOk() (*string, bool) {
	if o == nil || IsNil(o.UnicodeName) {
		return nil, false
	}
	return o.UnicodeName, true
}

// HasUnicodeName returns a boolean if a field has been set.
func (o *DnsQuestion) HasUnicodeName() bool {
	if o != nil && !IsNil(o.UnicodeName) {
		return true
	}

	return false
}

// SetUnicodeName gets a reference to the given string and assigns it to the UnicodeName field.
func (o *DnsQuestion) SetUnicodeName(v string) {
	o.UnicodeName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DnsQuestion) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsQuestion) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DnsQuestion) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DnsQuestion) SetType(v string) {
	o.Type = &v
}

func (o DnsQuestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UnicodeName) {
		toSerialize["unicode_name"] = o.UnicodeName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDnsQuestion struct {
	value *DnsQuestion
	isSet bool
}

func (v NullableDnsQuestion) Get() *DnsQuestion {
	return v.value
}

func (v *NullableDnsQuestion) Set(val *DnsQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsQuestion(val *DnsQuestion) *NullableDnsQuestion {
	return &NullableDnsQuestion{value: val, isSet: true}
}

func (v NullableDnsQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


